inputs = importdata('inputs.txt');
targets = importdata('targets.txt');
max_it = 10;
% merged the matrixes
total_matrix = [ inputs targets];
max_random_range = 1;
min_random_range = -1;
% Weight and bias initialization
W = rand(1, size(inputs, 2))*(2*max_random_range) + min_random_range;
b = rand;
Wevo = [];
Wevo = [Wevo; W];
bevo = [];
bevo = [bevo; b];
% mode = input('Elija un modo: 1->Gráfico, 2->Regla de Aprendizaje\n', 's');
mode = '2';
if(mode=='1')
    if (size(inputs, 2) == 2)
        plotPerceptron(total_matrix, W, b);
    else
        fprintf("Solo impresiones en 2 dimensiones soportada");
    end   
elseif(mode=='2')
    W = [ 0.5 -1];
    b = 0.5;
    Waux = W;
    baux = b;
    % Begin the iterations
    has_converged = false;
    for i = 1:max_it
        if (~has_converged)
            for row = total_matrix.'
                % Array Indexing
                p = row(1:size(inputs, 2));
                target = row(size(inputs, 2) + 1);
                a = hardlim(W*p + b);
                % Calculate the error
                e = target - a;
                % Convergence Checking
                Waux = W;
                baux = b;
                % Weight update
                W = W + e*p';
                % Bias update
                b = b + e;
                % Save the values
                Wevo = [Wevo; W];
                bevo = [bevo; b];
            end
             if (isequal(Waux, W) && baux == b)
                has_converged = true;
                fprintf("Convergió en %d iteraciones\n", i);
                W
                b
                plotHistory(Wevo, bevo);
                if (size(inputs, 2) == 2)
                    plotPerceptron(total_matrix, W, b);
                else
                    fprintf("Solo impresiones en 2 dimensiones soportada");
                end
                break;
             end
        end  
    end
    if (~has_converged)
        fprintf("No Convergió en %d iteraciones\n", max_it);
    end
else
    fprintf("Opción no reconocida\n");
end
    
function h = circle(x ,y, r, color)
    hold on
    h = plot(x, y, '-o', ...
        'MarkerSize', r, ...
        'MarkerEdgeColor', 'black',...
        'MarkerFaceColor', color);
    hold off
end

function h = plotPerceptron(matrix, W, b)
    % Plot the values
    figure
    ax = gca;                        % gets the current axes
    ax.XAxisLocation = 'origin';     % sets t1hem to zero
    ax.YAxisLocation = 'origin'; 
    hold on
    % plot the desición boundary
    x = -10:10;
    slope = -b/W(2) / W(1);
    intercept = -b / W(2);
    y = slope * x + intercept; 
    plot(x, y);
    ylim([-10 10])
    xlim([-10 10])
    r = 5;
    for row = matrix.'
        p = row(1:size(matrix, 2));
        target = row(size(matrix, 2));
        % Plot the target
        if (target == 1)
            h = circle(p(1), p(2), r, 'black');
        else
            h = circle(p(1), p(2), r, 'white');
        end
    end
end

function plotHistory(Wevo, bevo)
    % Plot the values
    hold on
    x = 1:length(colW);
    for i = 1:size(Wevo, 2)
        colW = Wevo(:, i);
        plot(x, colW);
    end
    hold off
end